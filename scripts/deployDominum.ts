// üì¶ –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è DominumMinter —Å —É—á—ë—Ç–æ–º NFT, –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
import { beginCell, toNano, TonClient, WalletContractV4, internal, fromNano, Address } from "@ton/ton";
import { getHttpEndpoint } from "@orbs-network/ton-access";
import { mnemonicToPrivateKey } from "@ton/crypto";
import { DominumMinter, storeMintMining } from "../output/DominumMinter";
import "dotenv/config";

const main = async () => {
    // üîê –ü–æ–ª—É—á–∞–µ–º –º–Ω–µ–º–æ–Ω–∏–∫—É
    const mnemonics = process.env.MNEMONICS;
    if (!mnemonics || mnemonics.split(" ").length !== 24) throw new Error("MNEMONICS –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 24 —Å–ª–æ–≤–∞");

    // üåê –°–µ—Ç—å –∏ endpoint
    const network = process.env.NETWORK ?? "testnet";
    if (!["mainnet", "testnet"].includes(network)) throw new Error("NETWORK –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'mainnet' –∏–ª–∏ 'testnet'");
    const endpoint = await getHttpEndpoint({ network });
    const client = new TonClient({ endpoint });

    // üîë –ö–ª—é—á–∏ –∏ –∫–æ—à–µ–ª—ë–∫
    const keyPair = await mnemonicToPrivateKey(mnemonics.split(" "));
    const wallet = WalletContractV4.create({ workchain: 0, publicKey: keyPair.publicKey });
    const walletContract = client.open(wallet);

    // üìä –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
    const supply = toNano(process.env.JETTON_SUPPLY ?? "50000000");
    const burnTax = Number(process.env.BURN_TAX ?? 5); // 0.05% –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    const poolAddress = Address.parse(process.env.POOL_ADDRESS!);
    const inflationAddress = Address.parse(process.env.INFLATION_ADDRESS!);
    const nftRegistry = Address.parse(process.env.NFT_REGISTRY!);

    // üèó –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç DominumMinter
    const dominumMinter = client.open(
        await DominumMinter.fromInit({
            admin: wallet.address,
            content: beginCell().storeStringTail(process.env.JETTON_DESCRIPTION ?? "Allodium Token").endCell(),
            wallet_code: DominumMinter.package.wc,
            max_supply: supply,
            burn_percent: burnTax,
            minting_closed: false,
            pool_address: poolAddress,
            inflation_address: inflationAddress,
            nft_registry: nftRegistry,
        })
    );

    const deployAmount = toNano("0.15"); // –° –∑–∞–ø–∞—Å–æ–º –Ω–∞ –¥–µ–ø–ª–æ–π –∏ gas

    // ‚õèÔ∏è –°–æ–∑–¥–∞—ë–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è MintMining
    const mintMsg = storeMintMining({
        $$type: "MintMining",
        query_id: 0n,
        ton_amount: supply,
        receiver: wallet.address,
    });

    const body = beginCell().store(mintMsg).endCell();

    // üì° –ì–æ—Ç–æ–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É
    const seqno = await walletContract.getSeqno();
    const balance = await walletContract.getBalance();
    console.log("–ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–µ—Ä–∞:", fromNano(balance), "TON");

    await walletContract.sendTransfer({
        seqno,
        secretKey: keyPair.secretKey,
        messages: [
            internal({
                to: dominumMinter.address,
                value: deployAmount,
                init: {
                    code: DominumMinter.init.code,
                    data: DominumMinter.init.data,
                },
                body,
            }),
        ],
    });

    console.log("‚úÖ DominumMinter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–µ–ø–ª–æ–π:", dominumMinter.address.toString());
    console.log(`üîó –ü—Ä–æ–≤–µ—Ä–∫–∞: https://${network}.tonviewer.com/${dominumMinter.address.toString({ urlSafe: true })}`);
};

void main();
